{"version":3,"sources":["Components/ContactListItem.js","Components/ContactList.js","Components/ContactForm.js","Components/Filter.js","Components/App.js","index.js"],"names":["ContactListItem","name","number","onDeleteContact","type","onClick","ContactList","updatedList","map","id","ContactForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addContact","props","onSubmit","this","pattern","title","onChange","placeholder","required","Component","Filter","onChangeFilter","App","contacts","filter","contactName","find","alert","uuidv4","deleteContact","contactId","handleFilterContacts","persistedContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","toLowerCase","includes","filterContactsWithQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.961d06ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ name, number, onDeleteContact }) => {\r\n  return (\r\n    <>\r\n      <li>\r\n        {name}: {number}\r\n        <button type=\"button\" onClick={onDeleteContact}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactList = ({ updatedList, onDeleteContact }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {updatedList.map(({ id, name, number }) => (\r\n          <ContactListItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={() => onDeleteContact(id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  updatedList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { addContact } = this.props;\r\n\r\n    addContact(name, number);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <p>Name</p>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            onChange={this.handleChange}\r\n            placeholder=\"Type in your name\"\r\n            required\r\n          />\r\n          <p>Number</p>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            onChange={this.handleChange}\r\n            placeholder=\"Type in your number\"\r\n            required\r\n          />\r\n          <div>\r\n            <button type=\"submit\">Add Contact</button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type to filter contacts\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\n\nimport ContactList from './ContactList';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst filterContactsWithQuery = (contacts, filter) =>\n  contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem('tasks');\n\n    if (persistedContacts) {\n      const contacts = JSON.parse(persistedContacts);\n\n      this.setState({ contacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('tasks', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (contactName, number) => {\n    const { contacts } = this.state;\n\n    const isExistingContact = !!contacts.find(\n      ({ name }) => name === contactName\n    );\n\n    return isExistingContact\n      ? alert(`${contactName} is already in contacts!`)\n      : this.setState({\n          contacts: [\n            ...this.state.contacts,\n            { name: contactName, number, id: uuidv4() },\n          ],\n        });\n  };\n\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  handleFilterContacts = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const filteredContacts = filterContactsWithQuery(contacts, filter);\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChangeFilter={this.handleFilterContacts} />\n        <ContactList\n          updatedList={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}